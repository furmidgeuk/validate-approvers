name: Validate PR Approvers - Workflow Call

on:
  workflow_call:
    inputs:
      config-path:
        required: true
        type: string
        description: "Path to the teams configuration file."
    secrets:
      github-token:
        required: true

jobs:
  validate-approvers:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Read Config
        id: config
        run: |
            TEAMS=$(yq eval -o=json '.teams' ${{ inputs.config-path }} | tr -d '\n')
            echo "teams=$TEAMS" >> $GITHUB_ENV
  

      - name: Debug Config
        run: |
          echo  ${{ env.teams }}

      - name: Validate Approvers
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.github-token }}
          script: |
            const OWNER = context.repo.owner;
            const REPO = context.repo.repo;
            const PR_NUMBER = context.payload.pull_request.number;

            const teams = JSON.parse(process.env.teams);

            async function getTeamMembers(teamSlug) {
              const members = await github.rest.teams.listMembersInOrg({
                org: OWNER,
                team_slug: teamSlug,
              });
              return members.data.map(member => member.login);
            }

            async function getPRReviews(prNumber) {
              const reviews = await github.rest.pulls.listReviews({
                owner: OWNER,
                repo: REPO,
                pull_number: prNumber,
              });
              return reviews.data.filter(review => review.state === 'APPROVED');
            }

            const reviews = await getPRReviews(PR_NUMBER);
            let approvalCounts = {};

            teams.forEach(team => {
              approvalCounts[team.name] = 0;
            });

            for (const review of reviews) {
              for (const team of teams) {
                const members = await getTeamMembers(team.name);
                if (members.includes(review.user.login)) {
                  approvalCounts[team.name]++;
                }
              }
            }

            for (const team of teams) {
              const required = team.approvals;
              const received = approvalCounts[team.name];

              console.log(`Team: ${team.name}, Required: ${required}, Received: ${received}`);

              if (received < required) {
                core.setFailed(`Requires at least ${required} approvals from ${team.name}. Currently: ${received}`);
              }
            }
