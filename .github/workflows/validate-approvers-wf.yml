name: Validate PR Approvers - Workflow Call

on:
  workflow_call:
    inputs:
      teams-file:
        required: true
        type: string
        description: "Path to JSON file representing the teams and required approvals."
    secrets:
      github-token:
          required: true
          description: "GitHub token for authentication."
jobs:
  validate-approvers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Approvers
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.github-token }}
          script: |
            const fs = require('fs');
            const OWNER = context.repo.owner;
            const REPO = context.repo.repo;
            const PR_NUMBER = context.payload.pull_request.number;
            const teamsFilePath = core.getInput("teams-file");

            let teams;
            try {
              const teamsContent = fs.readFileSync(teamsFilePath, 'utf8');
              teams = JSON.parse(teamsContent);
            } catch (error) {
              core.setFailed(`Error reading teams file: ${error.message}`);
              return;
            }

            async function getTeamMembers(teamSlug) {
              const members = await github.rest.teams.listMembersInOrg({
                org: OWNER,
                team_slug: teamSlug,
              });
              return members.data.map(member => member.login);
            }

            async function getPRReviews(prNumber) {
              const reviews = await github.rest.pulls.listReviews({
                owner: OWNER,
                repo: REPO,
                pull_number: prNumber,
              });
              return reviews.data.filter(review => review.state === 'APPROVED');
            }

            const reviews = await getPRReviews(PR_NUMBER);

            let approvalCounts = {};
            teams.forEach(team => {
              approvalCounts[team.team] = 0;
            });

            for (const review of reviews) {
              for (const team of teams) {
                const members = await getTeamMembers(team.team);
                if (members.includes(review.user.login)) {
                  approvalCounts[team.team]++;
                }
              }
            }

            for (const team of teams) {
              const required = team.approvals;
              const received = approvalCounts[team.team];

              console.log(`Team: ${team.team}, Required: ${required}, Received: ${received}`);

              if (received < required) {
                core.setFailed(`Requires at least ${required} approvals from ${team.team}. Currently: ${received}`);
              }
            }